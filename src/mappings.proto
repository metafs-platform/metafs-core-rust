syntax = "proto3";

message MappingMessage {
  int32 version = 1;                // if missing default to 1
  int64 timestamp = 2;              // Unix timestamp, if missing default to now
  oneof message_body {
    Version1Body v1 = 3;            // if missing, treat as ping and send beck version
  }
}

message Version1Body {
  string correlation_id = 1;        // uuid to match replies to requests, if missing leave empty
  repeated Mapping mappings = 2;    // List of mappings. If missing (ping) send current timestamp and same correlation (if present).
}

message Mapping {
  string path = 1;              // Key (e.g., "/example/path")
  string target = 2;            // Value (e.g., "/real/target/path"), optional for REMOVE
  string opaque = 3;            // Optional, if present, send with the message to the pipe when the mapping is hit
  bool delete = 4;              // Optional, default false
}

/*
Inside a mapping there are 4 fields:
  1. path
  2. target
  3. notify_pipe
  4. delete

In the table below, o means missing from the message payload, x means present.

 
Path|Target|Delete|Result:
--------------------------------
  o  |  o   |  o   |  clear all mappings
  o  |  o   |  x   |  deleted mapping for (default) path
  o  |  x   |  x   |  deleted mapping at mount point for (default)path->target (shortcut)
  o  |  x   |  o   |  created mapping at mount point for (default)path->target (shortcut)
  x  |  o   |  o   |  remove the mapping for the path
  x   |  o  |  x   |  deleted mapping for path
  x   |  x  |  o  |   created mapping at mount point for path->target
  x   |  x  |  x  |   deleted mapping at mount point for path->target

Sending Messages To the Send Pipe:

For MAX simplicity:
  1. When sending a request, send params as protobuf message.
  2. The return value has to also be a separate protobuf message.
  3. In other words, we are protobuffing the signatures of the methods.
  4. When sending a message we send a unique correlationid, 
    a. and we block until we get a response with the same correlationid, processing others but keeping blocked.
    d. when a timeout occurs, we send another request with the same correlationid and wait for a response.
    e. if the server is still working, we know because the same correlationid, then we will just ignore the reset.
    f. the bridge retries until it gets a response. After max timeout, it gives up and deletes mapping for path.
  5. each request is singular (not batched), but in its own thread.    

 */